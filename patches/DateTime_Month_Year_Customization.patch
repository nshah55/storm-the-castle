Index: MonoRail/Castle.MonoRail.Framework.Tests/Helpers/HtmlHelperTestCase.cs
===================================================================
--- MonoRail/Castle.MonoRail.Framework.Tests/Helpers/HtmlHelperTestCase.cs	(revision 5601)
+++ MonoRail/Castle.MonoRail.Framework.Tests/Helpers/HtmlHelperTestCase.cs	(working copy)
@@ -63,5 +63,31 @@
 			Assert.AreEqual( "<ul class=\"style1\">" + Environment.NewLine + "<li class=\"style2\">arg1</li>" + Environment.NewLine + "</ul>" + Environment.NewLine, 
 				helper.BuildUnorderedList(args, "style1", "style2") );
 		}
+
+		[Test]
+		public void BuildDateTime()
+		{
+			HtmlHelper helper = new HtmlHelper();
+			string result = helper.DateTime("dt", new DateTime(2010, 10, 1), DictHelper.Create("startYear=2008", "endYear=2009", "monthFriendly="));
+			Assert.IsTrue(result.Contains("2009"), "Not generate year properly");
+		}
+
+		[Test]
+		public void BuildDateTimeWithMonthFriendlyName()
+		{
+			HtmlHelper helper = new HtmlHelper();
+			string result = helper.DateTime("dt", new DateTime(2010, 10, 1), DictHelper.Create("startYear=2008", "endYear=2009"));
+			Assert.IsTrue(result.Contains("Jan"), "Month friendly doesn't seem to work");			
+		}
+
+		[Test]
+		public void BuildDateTimeWithCustomMonthFriendlyName()
+		{
+			HtmlHelper helper = new HtmlHelper();
+			string result = helper.DateTime("dt", new DateTime(2010, 10, 1),
+				DictHelper.Create("startYear=2008", "endYear=2009", "monthFriendly=m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12"));
+			Assert.IsTrue(result.Contains("m12"), "Month friendly doesn't seem to work");			
+			
+		}
 	}
 }
Index: MonoRail/Castle.MonoRail.Framework/Helpers/HtmlHelper.cs
===================================================================
--- MonoRail/Castle.MonoRail.Framework/Helpers/HtmlHelper.cs	(revision 5601)
+++ MonoRail/Castle.MonoRail.Framework/Helpers/HtmlHelper.cs	(working copy)
@@ -934,28 +934,57 @@
 			int index = 0;
 			for(int i = 1; i < 32; i++)
 				days[index++] = i.ToString();
-
+			var monthFriendlyNames = CommonUtils.ObtainEntryAndRemove(attributes, "monthFriendly",
+			                                                          "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sept,Oct,Nov,Dec").Split(',');
 			String[] months = new String[12];
 			index = 0;
-			for(int i = 1; i < 13; i++)
+			for (int i = 1; i < 13; i++)
 				months[index++] = i.ToString();
 
-			String[] years = new String[100];
+			for (int i = 1; i < 13; i++)
+				monthFriendlyNames[i - 1] = monthFriendlyNames[i - 1].Trim();
+
+			int startYear = int.Parse(CommonUtils.ObtainEntryAndRemove(attributes, "startYear", "1930"));
+			int finishYear = int.Parse(CommonUtils.ObtainEntryAndRemove(attributes, "endYear", "2030"));
+			int tmp = 2000;
+			if(startYear > finishYear) {
+				tmp = finishYear;
+				finishYear = startYear;
+				startYear = tmp;
+			}
+			String[] years = new String[finishYear - startYear + 1];
 			index = 0;
-			for(int i = 1930; i < 2030; i++)
+			for(int i = startYear; i <= finishYear; i++)
 				years[index++] = i.ToString();
 
 			StringBuilder sb = new StringBuilder(1024);
 
 			sb.Append(Select(name + "day", attributes));
+			sb.Append(CreateOption("--", "1"));
 			sb.Append(CreateOptionsFromPrimitiveArray(days, value.Day.ToString()));
 			sb.Append(EndSelect());
 			sb.Append(' ');
 			sb.Append(Select(name + "month", attributes));
-			sb.Append(CreateOptionsFromPrimitiveArray(months, value.Month.ToString()));
+			sb.Append(CreateOption("--", "1"));		
+	
+			if(monthFriendlyNames.Length == 12)
+			{
+				index = 0;
+				foreach (string monthName in monthFriendlyNames)
+				{
+					sb.AppendFormat("\t<option{0} value={1}>{2}</option>\r\n",
+													++index == value.Month ? " selected=\"selected\"" : "", index, monthName);
+				}
+			}
+			else
+			{
+				sb.Append(CreateOptionsFromPrimitiveArray(months, value.Month.ToString()));	
+			}
+			
 			sb.Append(EndSelect());
 			sb.Append(' ');
 			sb.Append(Select(name + "year", attributes));
+			sb.Append(CreateOption("----", "1"));
 			sb.Append(CreateOptionsFromPrimitiveArray(years, value.Year.ToString()));
 			sb.Append(EndSelect());
 
